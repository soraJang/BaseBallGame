[ JSON의 종류 ]
1. json-lib
 - 라이브러리가 다섯 개가 필요함.
 - 예전에 써봤는데 다섯 개 다 추가못해서 안돌아가서 당황했던적이 있음.
 - 이 라이브러리 하나를 쓰기 위해서 최소 여섯가지의 다른 라이브러리가 필요함
   - jakarata commons-lang
   - jakarata commons-beanutils
   - jakarata commons-collections
   - jakarata commons-logging
   - ezmorph
 - 백만건의 데이터를 put 하는데 걸리는 시간 : 약 6초
   - put : 6329 ms, 6 s
   - get : 95 ms, 0 s
 
2. Gson
 - 제작 : google
 - 자주 사용하는 사용하던 방식과는 조금 다르게 add를 사용한다는 점. (JSONObject)
 - gson이 뭐냐면, java 객체를 json 표현식으로 변환할수 있게 하는 라이브러리라고 한다.
 - 그러니까 JSONbject를 쓸때는 JSONObject를 쓰고 java객체를 변환해야할때는 Gson을 사용하면 되는가보다.
 - 크기를 구하는 메소드가 없어 entryset으로 구한다음 size를 붙여 구해야하는 번거로움이 있음. 근데 이것도 어떤 다른 걸로 하면 더 빠르게 할수 있는 것은 아닐까? 생각해봄ㅋ
 - 백만건의 데이터를 add 하는데 걸리는 시간
   - Gson의 JsonObject로 했을때
     - put : 2417 ms, 2s
     - get : 402 ms, 0s

∴ gson의 jsonobject는 get이 좀 느린것같네.
∴ 속도가 월등히 빠른 것 같기는 한데 테스트를 잘못한건가?
∴ Gson의 method를 보니 제네릭을 이용하는 메소드들이 많음.
∴ Gson은 단순히 어떤 데이터들을 jsonobject로 변환하여 사용해야할때보다는 객체를 통으로 바꾼다던가 등에서 유용해보인다. 물론 단순한 데이터에서도 put은 속도가 월등히 빠르니까 사용할 때 이점이 많을 듯.

3. FlexJSON
 - 가벼운 라이브러리라고 씌여져있음.
 - 이름은 FlexJson인데 class는 JSONserializer인게 특징인것같음ㅋ
 - public 멤버만을 저장하는 것은 Shallow Serialization, 모든걸 저장할때는 Deep Serialization. 둘 다 지원한다.
 - flex는 json을 내가 원하는 형태로 만드는것에 효율적일것으로 생각됨. 데이터 송수신에 적합한 형이 아닐까 생각해 봄. 
 - 기존에 내가 json을 어떤 형태로 만들려고 했을 때 net.sf.json은 json으로 주렁주렁 싸고 또 싸서 만들었지만 flex를 이용하면 include와 exclude라는 메소드를 사용하여 object안에 array를 넣을수 있고 또 그러한 형태로 넘겨주기 때문에 편할것으로 예상됨.

∴ 파서 기능은, 객체로 만든후에 json으로 만들면 되는거니까 딱히 할 필요는 없지 않을까 싶다. 이중으로 하는거라서 파서가 필요할까?
∴ JSONDeserializer로 역직렬화 하는 방법이 있긴 한데 에러난당. 잘 안된다. 뭔가 다른 방법이 있을 것 같다

** 객체 직렬화(Serializable)
 객체의 내용을 바이트 단위로 변환하여 파일 또는 네트워크를 통해 송수신이 가능하도록 만들어 주는 것. 객체 직렬화에서 메서드와 생성자는 제외되고 객체만 해당된다.
그러니까 저기 Gson이나 Flexjson했을 때 객체를 json으로 만들어 주는거 그거 얘기하는것같음.