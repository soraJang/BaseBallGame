1. Factory 패턴
지금은 야구게임이 한개이지만!
예를들어 다른 숫자게임을 만든다고 했을때
Factory 패턴을 쓰면 GameNums를 상속받은 애들이라면
내가 그 객체가 무엇인지를 생각하지 않고 create("str")을 해준다면
객체가 생성가능하다.
객체타입이 유연해 진다는 뜻이다.

그리고 객체생성시 어떤 문제가 있어 수정해야할때
나는 Factory클래스만 수정하면 되니까 좀더 용이하다.
예를들어 지금 나는 RandomNum 객체를 생성할때
기록을 위해서 RecordBoard라는 클래스의 객체를 주어 생성하도록 하는데
다른 방법을 찾아 RecordBoard를 주지 않아도 된다고 친다면?
나는 Factory메소드만 수정하면 된다는 것이지.
지금도 RecordBoard라는 클래스를 다른방법으로 구현하고 싶기도 하고.

Di로 주입하는게 있긴 한데 안되네ㅠㅠ 잘못했나봐

2. Observe
게임 데이터를 기록하려고 하는데
데이터가 변경될때마다 Observer가 알아서 기록해주면
내가 굳이 기록하지 않아도 되니까 편리하고
기록부분을 변경해야할때 Observer만 변경해주면
수정이 간단해 지니까 그걸로 좋고.

어떤 클래스에 변화가 일어났을때 다른 클래스에 통보해주는 패턴이라고 한다.
Observable이 통보를 하면 Observer가 통보를 받음.
Observable이 데이터가 변경되었습니다. 라고 외치면
Observer가 기록을 하는 거지.

다만 Oservable는 데이터의 변경유무만 알려주고 그외의 지시사항은 하지 않음.

내가 만든 Watcher가 데이터의 변경여부를 보고있는 클래스임 (implement Obeservable)
그다음에 CompareNum에서 데이터가 변경되었을때 데이터가 기록되야 하기 때문에 
얘가 '어떤 클래스'가 되는거지.
그리고 데이터를 기록하는 애가 통보를 받아야 하는거고 이 역할을 하는 클래스가 RecordWriter가 되는겨.
